name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from package.json
        working-directory: client
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag if not exists
        working-directory: client
        run: |
          git fetch --tags
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Checking tag v$VERSION"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists. Skipping creation."
          else
            echo "Tag v$VERSION not found. Creating tag."
            git tag "v$VERSION"
            git push origin "v$VERSION"
          fi

  build_frontend:
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'

      - name: Install dependencies
        working-directory: client
        run: npm ci --prefer-offline

      - name: Build frontend
        working-directory: client
        run: npm run build

      - name: Create frontend archive
        run: tar -czf build.tar.gz -C client/build .

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: build.tar.gz
          path: build.tar.gz

  build_backend:
    runs-on: ubuntu-latest
    needs: tag
    strategy:
      matrix:
        goarch: [mipsle, mips, arm64]
        include:
          - goarch: mipsle
            goos: linux
            output: api-mipsel
          - goarch: mips
            goos: linux
            output: api-mips
          - goarch: arm64
            goos: linux
            output: api-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: false

      - name: Build binary
        working-directory: server
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -trimpath -ldflags="-s -w" -o ../${{ matrix.output }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}

  create_release:
    runs-on: ubuntu-latest
    needs: [build_frontend, build_backend, tag]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: release-assets
          merge-multiple: true

      - name: List artifacts
        run: ls -la release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          files: |
            release-assets/*